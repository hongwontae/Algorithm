1. 빅오 표기법
정의 : 입력의 크기에 따라 전체적인 추세를 표현하는 방법

1-1. 빅오 표기법을 통해서 코드의 성능을 표기할 수 있다.
1-2. 빅오 표기법 => 가장 보편적인 평가 방법

1-4. 인풋(n)이 증가할 떄의 연산 개수를 계산한다. 이를 시간 복잡도라고 한다.
1-5. n가 비례하여 time이 증가한다. => O(N)
1-6. n의 숫자에 영향을 받지 않는다. => O(1)
1-7. n이 증가할수록 제곱으로 증가한다 => O(N2)

1-8. Big O Shorthand
=> 배열의 요소의 인덱스를 사용하거나 객체의 키를 사용하는 것은 상수이다.
=> 변수의 할당은 상수
=> 루프가 있으면 복잡도가 루프의 길이 곱하기 루프안에 있는 연산들이 된다. => O(n)이 대체로 된다.


1-9. input이 커질수록 알고리즘이 얼마나 많은 공간을 차지하는가? => 공간 복잡도 => 메모리를 얼마나 사용하니?
1-10. 보조 공간 복잡도 => 입력 되는 것을 제외한 알고리즘 자체가 필요로 하는 공간을 의미한다.

보조 공간 복잡도
1-11. string을 제외한 원시값 타입은 상수
1-12. string은 O(n)이다. => 50개의 문자열은 1개의 문자열보다 50배정도 크다.
1-13. 참조타입은 O(n)이다.

차지하는 공간에 대해 고려해보자



2. code Time
더 나은 코드란 무엇을 의미하는가?
=> 빠른 속도와 적은 메모리를 사용하는 코드를 일반적으로 의미한다.
=> 가장 우선순위는 속도이다.

2-1. performance.now()
=> 해당 코드가 호출되면 해당 코드 라인의 실행 시점의 시간을 기록한다.
=> performance - performance를 통해 호출 시간을 계산한다.


3. 시간 측정에 따른 코드 평가의 단점
3-1. 기기에 따라 기록되는 시간이 다르다.
3-2. 브라우저의 시간 기록이 조금씩 상이하다.
3-3. 알고리즘 측정이 매우 빠르게 진행되어 신뢰성이 떨어진다.


4. 코드를 평가할 떄 시간(초)를 기준으로 하는 것이 아니라 컴퓨터가 처리해야하는 연산 개수를 세자.
=> for 계산의 경우 연산의 과정이 많다. 필연적으로 for문이 단순한 수학공식 함수보다 시간이 더 걸리는 코드라는 것


5. 로그
5-1. log2(8)=3 => 2*3 =8; => 2의 몇 승이 8이 되는가?
5-2. log === log2로 표현한다.
5-3. O(1) 비슷한 O(log n)/ O(n2)와 비슷한 O(nlog n)




